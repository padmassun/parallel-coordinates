#!/home/nrcan/.rbenv/shims/ruby
require 'zlib'
require 'base64'
require 'csv'
require 'fileutils'
require 'optparse'
require 'yaml'
require 'sqlite3'
require 'json'
#require 'diff_match_patch'

def self.unlock(lockfile)
   if File.exist?(lockfile) then File.delete(lockfile) end
end
start = Time.now

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: btap_results_extracter [options]"
  opts.on('-f', '--filename NAME', 'CSV filename') { |v| options[:filename] = v }
end.parse!

raise OptionParser::MissingArgument if options[:filename].nil?
puts "Parsing #{options[:filename]} into ./osmfiles folder"

output_folder = "./osm_files"
output_error="#{output_folder}/error.txt"
FileUtils::mkdir_p(output_folder)
unlock('simulations.btap')
unlock('simulations.json')
simulations = []
db = SQLite3::Database.open "simulations.btap"
db.execute "CREATE TABLE IF NOT EXISTS Simulations( Id TEXT PRIMARY KEY,
                                                        baseline INTEGER,
                                                        necb2011_tests INTEGER,
                                                        building_type TEXT,
                                                        city TEXT,
                                                        province TEXT,
                                                        hdd INTEGER,
                                                        climate_zone TEXT,
                                                        total_electricity_eui REAL,
                                                        total_natural_gas_eui REAL, 
                                                        osm_zip TEXT,
                                                        btap_json TEXT,
                                                        view_model TEXT)"

simulations = []
CSV.foreach(options[:filename], headers: true) do |row|
  osm_file_zip = if row["btapresults.model_osm_zip"].nil? then nil else row["btapresults.model_osm_zip"].strip end
  osm_string =  Zlib::Inflate.inflate(Base64.strict_decode64( osm_file_zip )) unless osm_file_zip.nil?

  btap_json_file_zip = if row["btapresults.btap_results_json_zip"].nil? then nil else row["btapresults.btap_results_json_zip"].strip end
  btap_json =  JSON.parse(Zlib::Inflate.inflate(Base64.strict_decode64( btap_json_file_zip ))) unless btap_json_file_zip.nil?
  

  view_model_file_zip =   if row["view_model.view_model_html_zip"].nil? then nil else row["view_model.view_model_html_zip"].strip end
  view_model =  Zlib::Inflate.inflate(Base64.strict_decode64( view_model_file_zip )) unless view_model_file_zip.nil?

  id = row["_id"].strip
  building_type = row["create_doe_prototype_building.building_type"].strip
  template = row["create_doe_prototype_building.template"].strip
  city = btap_json['geography']['city']
  province = btap_json['geography']['state_province_region']
  hdd = btap_json['geography']['hdd']
  climate_zone = btap_json['geography']['climate_zone']
  
  total_electricity_eui = 0.0
  total_natural_gas_eui = 0.0
  baseline = 1
  necb2011_tests = 0
  #btap_json['building'] = []
  #btap_json['geography'] = []
  #btap_json['spacetype_area_breakdown'] = []
  #btap_json['economics'] = []

  #btap_json['end_uses'] = []
  #btap_json['end_uses_eui'] = []
  #btap_json['meter_peaks'] = []
  #btap_json['unmet_hours'] = []

  #btap_json['service_water_heating'] = []
  #btap_json['envelope'] = []
  #btap_json['spaces'] = []
  #btap_json['thermal_zones'] = []
  
  #btap_json['air_loops'] = []
  #btap_json['plant_loops'] = []



  btap_json['eplusout_err']['warnings'] = btap_json['eplusout_err']['warnings'].size
  btap_json['eplusout_err']['severe'] = btap_json['eplusout_err']['warnings'].size
  btap_json['eplusout_err']['fatal'] = btap_json['eplusout_err']['warnings'].size

  #btap_json['ruby_warnings'] = []
  #btap_json['information'] = []
  #btap_json['warnings'] = []
  #btap_json['errors'] = []

  btap_json['run_uuid'] = id
  btap_json['building_type'] = building_type
  btap_json['template'] = template
  #db.execute "SELECT json();"
  db.execute("INSERT INTO Simulations VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)",[ id, baseline, necb2011_tests, building_type, city, province,hdd,climate_zone, total_electricity_eui, total_natural_gas_eui, osm_file_zip, btap_json.to_json, view_model_file_zip]) 
  
  simulations << btap_json
end
#puts simulations.to_json
File.open('simulations.json', 'w') {|f| f.write(simulations.to_json) }
db.close if db

osm_zip_index = -999
view_zip_index = -999
json_zip_index = -999
id="nil"
name = -999
osm_counter = 0
csvfile = options[:filename]
open(csvfile) do |csv|
  is_header = true
  csv.each_line do |line|
    values = line.split(",")
    if is_header
      is_header = false
      values.each_with_index do |val,index|
        osm_zip_index = index if val.strip ==  "btapresults.model_osm_zip"
        json_zip_index = index if val.strip ==  "btapresults.btap_results_json_zip"
        view_zip_index = index if val.strip == "view_model.view_model_html_zip"
        id= index if val.strip == "_id"
        name = index if val.strip == "name"
      end
      raise("Could not find name or btapresults.zipped_model_osm column in csv file.") if name < 0 or osm_zip_index < 0 or view_zip_index < 0 or  json_zip_index < 0
    else
      #puts "#{values[id]}"
      unless values[ osm_zip_index ].strip.empty?
          puts "Writing #{values[id]}.osm"
          osm_string =  Zlib::Inflate.inflate(Base64.strict_decode64( values[ osm_zip_index ].strip ) )
          File.open("#{output_folder}/#{values[id]}.osm", 'w') {|f| f.write(osm_string) }
      else
        File.open(output_error, 'a') {|f| f.puts "Unable to write #{values[id]}.osm" }
      end
      
      unless values[ view_zip_index ].strip.empty?
          puts "Writing #{values[id]}_3d.html"
          view_string = Zlib::Inflate.inflate(Base64.strict_decode64( values[ view_zip_index ].strip) )
          File.open("#{output_folder}/#{values[id]}_3d.html", 'w') {|f| f.write(view_string) }
      else
        File.open(output_error, 'a') {|f| f.puts "Unable to write #{values[id]}_3d.html" }
      end
      
      unless values[  json_zip_index ].strip.empty?
          puts "Writing #{values[id]}.json"
          view_string = Zlib::Inflate.inflate(Base64.strict_decode64( values[  json_zip_index ].strip) )
          File.open("#{output_folder}/#{values[id]}.json", 'w') {|f| f.write(view_string) }
      else
        File.open(output_error, 'a') {|f| f.puts "Unable to write #{values[id]}.json" }
      end
      
      osm_counter +=1
    end
  end
end
puts "Created #{osm_counter} osm files in ./osm_file folder"

#Strip Zipped data from csv file otherwise it will not open in excel correctly.
original = CSV.read(csvfile, { headers: true, return_headers: true })
original.delete('btapresults.model_osm_zip')
original.delete('btapresults.btap_results_json_zip')
original.delete('view_model.view_model_html_zip')
CSV.open("#{output_folder}/output.csv", 'w', col_sep: ',') do |csv|
  original.each do |row|
    csv << row
  end
end
puts "Stripped OSM data, btap_results_json, and view_model_html from #{options[:filename]} and saved result to ./osm_file/output.csv. \nNow useable by Excel"

puts "completed in #{Time.now - start} secs"
